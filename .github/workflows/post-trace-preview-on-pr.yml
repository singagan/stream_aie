name: Post Trace Preview Comment

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  wait-and-comment:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh jq unzip

      - name: Get PR metadata
        id: prmeta
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          HEAD_BRANCH=${{ github.event.pull_request.head.ref }}
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "head_branch=$HEAD_BRANCH" >> $GITHUB_OUTPUT

      - name: Poll for artifact (max 10 minutes)
        id: wait-artifact
        run: |
          echo "Looking for 'outputs' artifact on latest successful workflow run for PR #${{ steps.prmeta.outputs.pr_number }} (branch: ${{ steps.prmeta.outputs.head_branch }})"

          for i in {1..10}; do
            echo "⏳ Attempt $i of 10..."

            RUNS=$(gh api repos/singagan/stream_aie/actions/runs \
              -H "Accept: application/vnd.github+json" \
              --paginate \
              --jq '.workflow_runs[] | select(.head_sha == "${{ github.event.pull_request.head.sha }}" and .event == "pull_request" and .conclusion == "success") | {id: .id, artifacts_url: .artifacts_url}')

            if [[ -z "$RUNS" ]]; then
              echo "No matching successful runs yet. Sleeping 60s..."
              sleep 60
              continue
            fi

            for row in $(echo "$RUNS" | jq -c '.'); do
              RUN_ID=$(echo "$row" | jq -r '.id')
              ARTIFACTS_URL=$(echo "$row" | jq -r '.artifacts_url')

              ARTIFACT_ID=$(gh api "$ARTIFACTS_URL" \
                -H "Accept: application/vnd.github+json" \
                --jq '.artifacts[] | select(.name == "outputs") | .id' || true)

              if [[ -n "$ARTIFACT_ID" ]]; then
                echo "✅ Found artifact ID: $ARTIFACT_ID from run $RUN_ID"
                echo "artifact_id=$ARTIFACT_ID" >> $GITHUB_ENV
                exit 0
              fi
            done

            echo "Still no artifact. Sleeping 60s..."
            sleep 60
          done

          echo "❌ Timed out waiting for 'outputs' artifact."
          exit 1
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download and extract artifact
        run: |
          echo "Downloading artifact.zip..."
          gh api /repos/singagan/stream_aie/actions/artifacts/$artifact_id/zip \
            -H "Accept: application/vnd.github+json" > artifact.zip
          mkdir artifact_contents
          unzip -q artifact.zip -d artifact_contents
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on PR with image previews
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.COMMENT_PAT }}
          script: |
            const fs = require('fs');
            const path = require('path');

            const basePath = 'artifact_contents';
            const folders = fs.readdirSync(basePath).filter(f =>
              fs.statSync(path.join(basePath, f)).isDirectory()
            );

            let body = `## 🔍 Efficiency Trace Preview\n`;
            body += `This comment shows \`trace_efficiency_mm.png\` previews from the latest CI artifact.\n\n`;

            for (const folder of folders.sort()) {
              const imgPath = path.join(basePath, folder, 'trace_efficiency_mm.png');
              if (fs.existsSync(imgPath)) {
                const imgData = fs.readFileSync(imgPath).toString('base64');
                body += `### ${folder}\n`;
                body += `![${folder}](data:image/png;base64,${imgData})\n\n`;
              } else {
                body += `### ${folder}\n`;
                body += `_No trace_efficiency_mm.png found._\n\n`;
              }
            }

            const prNumber = context.payload.pull_request.number;

            const { data: comments } = await github.rest.issues.listComments({
              ...context.repo,
              issue_number: prNumber,
            });

            const marker = "## 🔍 Efficiency Trace Preview";
            const botComment = comments.find(c =>
              c.user.type === 'Bot' && c.body.includes(marker)
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                ...context.repo,
                comment_id: botComment.id,
                body,
              });
            } else {
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: prNumber,
                body,
              });
            }
